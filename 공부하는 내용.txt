public: create-react-app으로 개발할 React 프로젝트의 Static 파일들(index.html 등)이 저장된 폴더입니다.
public/index.html: 개발한 React 프로젝트가 표시될 파일
src: 실제 React를 사용하여 개발을 할 때 사용하는 폴더입니다.
src/index.js: 우리가 개발한 React 프로젝트를 index.html 파일에 표시하기 위한 파일
src/App.js: 기본적으로 제공되는 React 컴포넌트 예제
src/App.css: App 컴포넌트에서 사용하는 CSS 파일
src/App.test.js: App 컴포넌트를 테스트하기 위한 파일
src/reportWebVitals.js: React의 성능을 측정하기 위한 파일
src/setupTests.js: React에서 테스트를 실행하기 위한 설정 파일
package.json: 개발에 필요한 라이브러리를 관리하는 파일입니다.

React Testing Library는 실행 디테일을 가지지 않는 React 컴포넌트를 테스트하게 하는 도구 모음입니다. 이러한 접근은 리팩 토링을 수월하게 하며 접근성에 대한 가장 좋은 연습을 가능하게 합니다. 자식 컴포넌트를 가지지 않는 컴포넌트에 대한 얕은 렌더링 방법을 제공하지 않더라도 Jest와 같은 테스트 러너는 mocking에 의해 위를 가능하게 합니다.

백엔드 프론트 역할을 나눔

관계형 데이터베이스랑 NoSQL데이터베이스 뭐가 다른지 알아야함
API에 대해서 부족하다
클라이언트 사이드에 대해 알아야함
Ci/CD(테스팅에 대한 정확한 개념을 알아야함)

아키텍처 패턴(위에서 부터 아래로 내려오면서 공부하면됨)
모놀로틱 앱(하나에 전부 몰빵하는 서비스)
마이크로 서비스(기능들을 나워서 서비스를 함)
 ->이게 프론트와 백을 나눈다는 개념이 아니라 백만을 여러개로 나누는 개념

view 모델은 접속만 해도 서버를 잡아먹기 때문에 view로 프론트를 개발하는 것은 좋지 않다


프론트에는 프론트 전용 서버가 존재를 하는데 view가 직접연결된 방식을 이용한다면
나중에 바꾸고 싶을때 프론트와 서버 자체를 전체 연결해야함
무조건 프론트와 백엔드를 분리해서 연결해야함

윈도우에서 개발을 해도 리눅스와 맥에선 어떻게 실행할것 이냐의 문제를 말할 수 있음
***docker < 이거에 대해 공부를 자세하게 해야할것 docker를 이용해서 개발환경을 설정함
	OS제약을 받지 않기 때문에 무조건 해야함
(어디에서 개발을 하던 서로 바로 적용이 되도록 하는것)


환경마라톤

마리아db 공부하기